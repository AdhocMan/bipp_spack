diff --git a/include/contrib/README b/include/contrib/README
new file mode 100644
index 0000000..c9855c7
--- /dev/null
+++ b/include/contrib/README
@@ -0,0 +1,18 @@
+This folder contains functions/files from FINUFFT that cuFINUFFT used. Following describes details of dependencies of each file.
+- utils.h
+  Definitions of CUCPX, CUFFT_TYPE, CUFFT_EX are added and are set depending on preprocessor SINGLE. 
+  Definition of BIGINT is changed to the normal 4 byte integer (See line 81)
+
+- utils.cpp
+  This is required because of the use of computing norm, relative norm of vectors, e.g. relerrtwonorm, in the test codes.
+
+- common.h 
+- common.cpp (hence legendre_rule_fast.c/.h are included)
+  setup_spreader_for_nufft, set_nf_type12, onedim_fseries_kernel are called in cufinufft_makeplan.
+  
+- spreadinterp.h
+  cufinufft plan contains the spread_opts struct where nspread, spread_direction, pirange, upsampfac, ES_beta, ES_c are used. 
+  
+- ker_horner_allw_loop.c
+- ker_lowupsampfac_horner_allw_loop.c
+  These two files are included in the src/2,3d/spreadinterp2,3d.cu files (See device function eval_kernel_vec_Horner)
diff --git a/include/contrib/common.h b/include/contrib/common.h
new file mode 100644
index 0000000..a86d4b5
--- /dev/null
+++ b/include/contrib/common.h
@@ -0,0 +1,28 @@
+#ifndef COMMON_H
+#define COMMON_H
+
+#include "dataTypes.h"
+#include "utils.h"
+#include "utils_fp.h"
+#include "spreadinterp.h"
+
+// constants needed within common
+#define MAX_NQUAD 100              // max number of positive quadr nodes
+// increase this if you need >1TB RAM...
+#define MAX_NF    (BIGINT)INT_MAX  // In cufinufft we limit array sizes to 2^31
+                                   // which is about 2 billion, since we set
+                                   // BIGINT to int. (Differs from FINUFFT)
+
+struct cufinufft_opts;
+
+// common.cpp provides...
+int setup_spreader_for_nufft(SPREAD_OPTS &spopts, FLT eps, cufinufft_opts opts);
+void SET_NF_TYPE12(BIGINT ms, cufinufft_opts opts, SPREAD_OPTS spopts,BIGINT *nf,
+                   BIGINT b);
+void onedim_fseries_kernel(BIGINT nf, FLT *fwkerhalf, SPREAD_OPTS opts);
+void onedim_fseries_kernel_precomp(BIGINT nf, FLT *f, dcomplex *a, SPREAD_OPTS opts);
+void onedim_fseries_kernel_compute(BIGINT nf, FLT *f, dcomplex *a, FLT *fwkerhalf, SPREAD_OPTS opts);
+
+void onedim_nuft_kernel(BIGINT nk, FLT *k, FLT *phihat, SPREAD_OPTS opts);
+
+#endif  // COMMON_H
diff --git a/include/contrib/dataTypes.h b/include/contrib/dataTypes.h
new file mode 100644
index 0000000..defb92a
--- /dev/null
+++ b/include/contrib/dataTypes.h
@@ -0,0 +1,41 @@
+// ------------ FINUFFT data type definitions ----------------------------------
+
+#if (!defined(DATATYPES_H) && !defined(SINGLE)) || (!defined(DATATYPESF_H) && defined(SINGLE))
+// Make sure we only include once per precision (as in finufft_eitherprec.h).
+#ifndef SINGLE
+#define DATATYPES_H
+#else
+#define DATATYPESF_H
+#endif
+
+// octave (mkoctfile) needs this otherwise it doesn't know what int64_t is!
+#include <stdint.h>
+
+// All indexing in library that potentially can exceed 2^31 uses 64-bit signed.
+// This includes all calling arguments (eg M,N) that could be huge someday...
+// Note: BIGINT is modified to have ``int'' data type for cufinufft.
+typedef int BIGINT;
+
+// decide which kind of complex numbers to use in interface...
+#ifdef __cplusplus
+#include <complex>          // C++ type
+#define COMPLEXIFY(X) std::complex<X>
+#else
+#include <complex.h>        // C99 type
+#define COMPLEXIFY(X) X complex
+#endif
+
+#undef FLT
+#undef CPX
+
+// Precision-independent real and complex types for interfacing...
+// (note these cannot be typedefs since we want dual-precision library)
+#ifdef SINGLE
+  #define FLT float
+#else
+  #define FLT double
+#endif
+
+#define CPX COMPLEXIFY(FLT)
+
+#endif  // DATATYPES_H or DATATYPESF_H
diff --git a/include/contrib/dirft.h b/include/contrib/dirft.h
new file mode 100644
index 0000000..0fcd200
--- /dev/null
+++ b/include/contrib/dirft.h
@@ -0,0 +1,19 @@
+#ifndef DIRFT_H
+#define DIRFT_H
+
+#include "utils.h"
+#include "utils_fp.h"
+
+void dirft1d1(BIGINT nj,FLT* x,CPX* c,int isign,BIGINT ms, CPX* f);
+void dirft1d2(BIGINT nj,FLT* x,CPX* c,int iflag,BIGINT ms, CPX* f);
+void dirft1d3(BIGINT nj,FLT* x,CPX* c,int iflag,BIGINT nk, FLT* s, CPX* f);
+
+void dirft2d1(BIGINT nj,FLT* x,FLT *y,CPX* c,int iflag,BIGINT ms, BIGINT mt, CPX* f);
+void dirft2d2(BIGINT nj,FLT* x,FLT *y,CPX* c,int iflag,BIGINT ms, BIGINT mt, CPX* f);
+void dirft2d3(BIGINT nj,FLT* x,FLT *y,CPX* c,int iflag,BIGINT nk, FLT* s, FLT* t, CPX* f);
+
+void dirft3d1(BIGINT nj,FLT* x,FLT *y,FLT *z,CPX* c,int iflag,BIGINT ms, BIGINT mt, BIGINT mu, CPX* f);
+void dirft3d2(BIGINT nj,FLT* x,FLT *y,FLT *z,CPX* c,int iflag,BIGINT ms, BIGINT mt, BIGINT mu, CPX* f);
+void dirft3d3(BIGINT nj,FLT* x,FLT *y,FLT *z,CPX* c,int iflag,BIGINT nk, FLT* s, FLT* t, FLT *u, CPX* f);
+
+#endif
diff --git a/include/contrib/legendre_rule_fast.h b/include/contrib/legendre_rule_fast.h
new file mode 100644
index 0000000..30d9718
--- /dev/null
+++ b/include/contrib/legendre_rule_fast.h
@@ -0,0 +1,6 @@
+#ifndef GAUSSQUAD_H
+#define GAUSSQUAD_H
+
+void legendre_compute_glr ( int n, double x[], double w[] );
+
+#endif
diff --git a/include/contrib/legendre_rule_fast.license b/include/contrib/legendre_rule_fast.license
new file mode 100644
index 0000000..9729d4d
--- /dev/null
+++ b/include/contrib/legendre_rule_fast.license
@@ -0,0 +1,8 @@
+LICENSE info for legendre_rule_fast.c ONLY:
+
+According to
+https://people.sc.fsu.edu/~jburkardt/c_src/legendre_rule_fast/legendre_rule_fast.html
+
+The computer code and data files described and made available on this web page are distributed under the GNU LGPL license:
+
+https://www.gnu.org/licenses/lgpl-3.0.en.html
diff --git a/include/contrib/spreadinterp.h b/include/contrib/spreadinterp.h
new file mode 100644
index 0000000..8604e84
--- /dev/null
+++ b/include/contrib/spreadinterp.h
@@ -0,0 +1,43 @@
+#if (!defined(SPREADINTERP_H) && !defined(SINGLE)) || \
+  (!defined(SPREADINTERPF_H) && defined(SINGLE))
+
+#include <math.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include "utils.h"
+#include "utils_fp.h"
+
+#define MAX_NSPREAD 16     // upper bound on w, ie nspread, even when padded
+                           // (see evaluate_kernel_vector); also for common
+
+#undef SPREAD_OPTS
+
+#ifdef SINGLE
+#define SPREAD_OPTS spread_optsf
+#define SPREADINTERPF_H
+#else
+#define SPREAD_OPTS spread_opts
+#define SPREADINTERP_H
+#endif
+
+struct SPREAD_OPTS {      // see cnufftspread:setup_spreader for defaults.
+  int nspread;            // w, the kernel width in grid pts
+  int spread_direction;   // 1 means spread NU->U, 2 means interpolate U->NU
+  int pirange;            // 0: coords in [0,N), 1 coords in [-pi,pi)
+  FLT upsampfac;          // sigma, upsampling factor, default 2.0
+  // ES kernel specific...
+  FLT ES_beta;
+  FLT ES_halfwidth;
+  FLT ES_c;
+};
+
+// NU coord handling macro: if p is true, rescales from [-pi,pi] to [0,N], then
+// folds *only* one period below and above, ie [-N,2N], into the domain [0,N]...
+#define RESCALE(x,N,p) (p ? \
+		     ((x*M_1_2PI + (x<-PI ? 1.5 : (x>=PI ? -0.5 : 0.5)))*N) : \
+		     (x<0 ? x+N : (x>=N ? x-N : x)))
+// yuk! But this is *so* much faster than slow std::fmod that we stick to it.
+FLT evaluate_kernel(FLT x, const SPREAD_OPTS &opts);
+int setup_spreader(SPREAD_OPTS &opts, FLT eps, FLT upsampfac, int kerevalmeth);
+
+#endif  // SPREADINTERP_H
diff --git a/include/contrib/utils.h b/include/contrib/utils.h
new file mode 100644
index 0000000..c2a287d
--- /dev/null
+++ b/include/contrib/utils.h
@@ -0,0 +1,76 @@
+// This contains some library-wide definitions & precision/OMP switches,
+// as well as the interfaces to utilities in utils.cpp. Barnett 6/18/18.
+
+#ifndef UTILS_H
+#define UTILS_H
+
+// octave (mkoctfile) needs this otherwise it doesn't know what int64_t is!
+#include <stdint.h>
+
+#include <complex>          // C++ type complex
+#include <cuComplex.h>
+#include "dataTypes.h"
+
+// fraction growth cut-off in arraywidcen(), to decide if translate in type-3
+#define ARRAYWIDCEN_GROWFRAC 0.1
+
+// math consts not in math.h ...
+#define M_1_2PI 0.159154943091895336
+#define M_2PI   6.28318530717958648
+// to avoid mixed precision operators in eg i*pi...
+#define PI (FLT)M_PI
+
+using namespace std;        // means std:: not needed for cout, max, etc
+
+typedef complex<double> dcomplex;  // slightly sneaky since duplicated by mwrap
+
+// Global error codes for the library...
+#define WARN_EPS_TOO_SMALL       1
+#define ERR_MAXNALLOC            2
+#define ERR_SPREAD_BOX_SMALL     3
+#define ERR_SPREAD_PTS_OUT_RANGE 4
+#define ERR_SPREAD_ALLOC         5
+#define ERR_SPREAD_DIR           6
+#define ERR_UPSAMPFAC_TOO_SMALL  7
+#define HORNER_WRONG_BETA        8
+#define ERR_NDATA_NOTVALID       9
+
+
+//#define MAX(a,b) (a>b) ? a : b  // but we use std::max instead
+#define MIN(a,b) (a<b) ? a : b
+
+// ahb math helpers
+BIGINT next235beven(BIGINT n, BIGINT b);
+BIGINT next235even(BIGINT n);
+
+// jfm timer class
+#include <sys/time.h>
+class CNTime {
+ public:
+  void start();
+  double restart();
+  double elapsedsec();
+ private:
+  struct timeval initial;
+};
+
+// allow compile-time switch off of openmp, so compilation without any openmp
+// is done (Note: _OPENMP is automatically set by -fopenmp compile flag)
+#ifdef _OPENMP
+  #include <omp.h>
+  // point to actual omp utils
+  #define MY_OMP_GET_NUM_THREADS() omp_get_num_threads()
+  #define MY_OMP_GET_MAX_THREADS() omp_get_max_threads()
+  #define MY_OMP_GET_THREAD_NUM() omp_get_thread_num()
+  #define MY_OMP_SET_NUM_THREADS(x) omp_set_num_threads(x)
+  #define MY_OMP_SET_NESTED(x) omp_set_nested(x)
+#else
+  // non-omp safe dummy versions of omp utils
+  #define MY_OMP_GET_NUM_THREADS() 1
+  #define MY_OMP_GET_MAX_THREADS() 1
+  #define MY_OMP_GET_THREAD_NUM() 0
+  #define MY_OMP_SET_NUM_THREADS(x)
+  #define MY_OMP_SET_NESTED(x)
+#endif
+
+#endif  // UTILS_H
diff --git a/include/contrib/utils_fp.h b/include/contrib/utils_fp.h
new file mode 100644
index 0000000..7c15969
--- /dev/null
+++ b/include/contrib/utils_fp.h
@@ -0,0 +1,78 @@
+// Header for utils_fp.cpp, a little library of low-level array stuff.
+// These are functions which depend on single/double precision.
+// (rest of finufft defs and types are now in defs.h)
+
+#if (!defined(UTILS_FP_H) && !defined(SINGLE)) || (!defined(UTILS_FPF_H) && defined(SINGLE))
+// Make sure we only include once per precision (as in finufft_eitherprec.h).
+#ifndef SINGLE
+#define UTILS_FP_H
+#else
+#define UTILS_FPF_H
+#endif
+
+
+// octave (mkoctfile) needs this otherwise it doesn't know what int64_t is!
+#include <stdint.h>
+
+#include <complex>          // C++ type complex
+#include <cuComplex.h>
+#include "dataTypes.h"
+
+
+#undef EPSILON
+#undef IMA
+#undef FABS
+#undef CUCPX
+#undef CUFFT_TYPE
+#undef CUFFT_EX
+#undef SET_NF_TYPE12
+
+// Compile-flag choice of single or double (default) precision:
+// (Note in the other codes, FLT is "double" or "float", CPX same but complex)
+#ifdef SINGLE
+  // machine epsilon for rounding
+  #define EPSILON (float)6e-08
+  #define IMA complex<float>(0.0,1.0)
+  #define FABS(x) fabs(x)
+  #define CUCPX cuFloatComplex
+  #define CUFFT_TYPE CUFFT_C2C
+  #define CUFFT_EX cufftExecC2C
+  #define SET_NF_TYPE12 set_nf_type12f
+#else
+  // machine epsilon for rounding
+  #define EPSILON (double)1.1e-16
+  #define IMA complex<double>(0.0,1.0)
+  #define FABS(x) fabsf(x)
+  #define CUCPX cuDoubleComplex
+  #define CUFFT_TYPE CUFFT_Z2Z
+  #define CUFFT_EX cufftExecZ2Z
+  #define SET_NF_TYPE12 set_nf_type12
+#endif
+
+
+// ahb's low-level array helpers
+FLT relerrtwonorm(BIGINT n, CPX* a, CPX* b);
+FLT errtwonorm(BIGINT n, CPX* a, CPX* b);
+FLT twonorm(BIGINT n, CPX* a);
+FLT infnorm(BIGINT n, CPX* a);
+void arrayrange(BIGINT n, FLT* a, FLT *lo, FLT *hi);
+void indexedarrayrange(BIGINT n, BIGINT* i, FLT* a, FLT *lo, FLT *hi);
+void arraywidcen(BIGINT n, FLT* a, FLT *w, FLT *c);
+
+// Random numbers: crappy unif random number generator in [0,1):
+//#define rand01() (((FLT)(rand()%RAND_MAX))/RAND_MAX)
+#define rand01() ((FLT)rand()/RAND_MAX)
+// unif[-1,1]:
+#define randm11() (2*rand01() - (FLT)1.0)
+// complex unif[-1,1] for Re and Im:
+#define crandm11() (randm11() + IMA*randm11())
+
+// Thread-safe seed-carrying versions of above (x is ptr to seed)...
+#define rand01r(x) ((FLT)rand_r(x)/RAND_MAX)
+// unif[-1,1]:
+#define randm11r(x) (2*rand01r(x) - (FLT)1.0)
+// complex unif[-1,1] for Re and Im:
+#define crandm11r(x) (randm11r(x) + IMA*randm11r(x))
+
+
+#endif  // UTILS_FP_H
diff --git a/include/cufinufft_eitherprec.h b/include/cufinufft_eitherprec.h
index 9dd2a32..5c08079 100644
--- a/include/cufinufft_eitherprec.h
+++ b/include/cufinufft_eitherprec.h
@@ -11,13 +11,13 @@
 #include <assert.h>
 #include <cuda_runtime.h>
 #include "cufinufft_opts.h"
-#include "../src/precision_independent.h"
+//#include "../src/precision_independent.h"
 #include "cufinufft_errors.h"
 
-#include "../contrib/utils.h"
-#include "../contrib/dataTypes.h"
-#include "../contrib/spreadinterp.h"
-#include "../contrib/utils_fp.h"
+#include "contrib/utils.h"
+#include "contrib/dataTypes.h"
+#include "contrib/spreadinterp.h"
+#include "contrib/utils_fp.h"
 
 
 #ifndef SINGLE
@@ -326,7 +326,7 @@ typedef struct CUFINUFFT_PLAN_S * CUFINUFFT_PLAN;
 
 /* We include common.h here because it depends on SPREAD_OPTS and
    CUFINUFFT_PLAN_S structs being completely defined first. */
-#include "../contrib/common.h"
+#include "contrib/common.h"
 
 #define checkCufftErrors(call)
 
diff --git a/src/1d/spread1d_wrapper.cu b/src/1d/spread1d_wrapper.cu
index 1d31c59..db444e2 100644
--- a/src/1d/spread1d_wrapper.cu
+++ b/src/1d/spread1d_wrapper.cu
@@ -9,6 +9,7 @@
 #include <cuComplex.h>
 #include "../cuspreadinterp.h"
 #include "../memtransfer.h"
+#include "../precision_independent.h"
 
 using namespace std;
 
diff --git a/src/2d/spread2d_wrapper.cu b/src/2d/spread2d_wrapper.cu
index da5d1de..a2ba22a 100644
--- a/src/2d/spread2d_wrapper.cu
+++ b/src/2d/spread2d_wrapper.cu
@@ -9,6 +9,7 @@
 #include <cuComplex.h>
 #include "../cuspreadinterp.h"
 #include "../memtransfer.h"
+#include "../precision_independent.h"
 
 using namespace std;
 
diff --git a/src/2d/spread2d_wrapper_paul.cu b/src/2d/spread2d_wrapper_paul.cu
index 5dbd4f1..6abaad1 100644
--- a/src/2d/spread2d_wrapper_paul.cu
+++ b/src/2d/spread2d_wrapper_paul.cu
@@ -9,6 +9,7 @@
 #include <cuComplex.h>
 #include "../cuspreadinterp.h"
 #include "../memtransfer.h"
+#include "../precision_independent.h"
 
 using namespace std;
 
